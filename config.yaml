# 必读！！！
# 注意规则在满足自己需求情况下，尽量做到精简，不要过度复杂，以免影响性能。
# 跑裸核用户请自行去掉下方控制面板模块的注释。
# 机场订阅
# 定义完整代理提供商默认配置锚点（包含所有固定属性）
proxy-full-default: &proxy-full-default
  type: http
  interval: 86400
  health-check:
    enable: true
    url: https://www.gstatic.com/generate_204
    interval: 300
  proxy: 直连

proxy-providers:
  free_cloud:
    <<: *proxy-full-default  # 继承所有默认配置
    url: "https://sub.seaya.link/share/sub/free%20cloud?token=9nABIwjltJ0l6FSja_r2y"  # 仅需指定url
 
# 节点信息
proxies:
  - {name: 直连, type: direct}

# 全局配置 
port: 7890
socks-port: 7891
redir-port: 7892
mixed-port: 7893
tproxy-port: 7894
allow-lan: true
bind-address: "*"
ipv6: false
unified-delay: true
tcp-concurrent: true
# interface-name: enp6s18
log-level: warning
find-process-mode: 'off'
global-client-fingerprint: chrome
keep-alive-idle: 600
keep-alive-interval: 15
profile:
  store-selected: true
  store-fake-ip: true

# 为防止使用插件朋友遇到面板问题，我注释掉了此模块。
# 跑裸核朋友自行删除注释即可
#external-controller: 0.0.0.0:9090
#secret: ""
#external-ui: "/etc/mihomo/ui"
#external-ui-name: zashboard
#external-ui-url: "https://github.com/Zephyruso/zashboard/archive/refs/heads/gh-pages.zip"

# 嗅探
sniffer:
  enable: true
  sniff:
    HTTP:
      ports: [80, 8080-8880]
      override-destination: true
    TLS:
      ports: [443, 8443]
    QUIC:
      ports: [443, 8443]
  force-domain:
    - "+.v2ex.com"
  skip-domain:
    - "+.baidu.com"

# 入站  
tun:
  enable: true
  # system/gvisor/mixed
  stack: mixed
  dns-hijack: ["any:53", "tcp://any:53"]
  auto-route: true
  auto-redirect: true
  auto-detect-interface: true

# DNS模块
dns:
  enable: true
  listen: 0.0.0.0:1053
  ipv6: false
  respect-rules: true
  enhanced-mode: fake-ip
  fake-ip-range: 28.0.0.1/8
  fake-ip-filter-mode: blacklist
  fake-ip-filter:
    - "geosite:connectivity-check"
    - "geosite:private"
    - "rule-set:private_domain,cn_domain"
    - "time.*.com"
    - "+.market.xiaomi.com"
    - "*.lan"
    - "+.srv.nintendo.net"
    - "+.stun.playstation.net"
    - "+.xboxlive.com"
    - "xbox.*.microsoft.com"
    - "*.battlenet.com.cn"
    - "*.battlenet.com"
    - "*.blzstatic.cn"
    - "*.battle.net"
    - "+.push.apple.com"
    - "*"
    - "+.lan"
    - "connect.rom.miui.com"
    - "+.miwifi.com"
    - "+.ntp.org"
    - "+.u-tools.cn"
    - "+.mediatek.com"
    - "+.cfprefer1.xyz"
    - "+.wetab.link"
    - "+.tyasaka.xyz"
    # QQ
    - "localhost.ptlogin2.qq.com"
    - "localhost.sec.qq.com"
    # WeChat
    - "localhost.work.weixin.qq.com"
    - "+.weixin.qq.com"
    - "+.wechat.com"
    # Windows
    - "time.windows.com"
    - "+.msftconnecttest.com"
    - "+.msftncsi.com"
    - "+.wpsmail.net"
    - "+.henzanapp.com"
    - "+.pconline.com.cn"
  default-nameserver:
    - 223.5.5.5
    - 119.29.29.29      # 腾讯DNSPod
    - 223.5.5.5         # 阿里DNS
    - 223.6.6.6         # 阿里DNS
    - 180.76.76.76      # 百度DNS
  proxy-server-nameserver:
    - https://223.5.5.5/dns-query
     
  # namesever尽量用运营商提供的DNS
  nameserver:
    - 223.5.5.5
    - 119.29.29.29
# ========================
# 策略组定义
# ========================
default: &default
    type: select
    proxies:
      - 🔯 香港故转
      - 🔯 日本故转
      - 🔯 狮城故转
      - 🔯 美国故转
      - ♻️ 香港智能
      - ♻️ 日本智能
      - ♻️ 狮城智能
      - ♻️ 美国智能
      - ♻️ 自动选择
      - 🇭🇰 香港节点
      - 🇯🇵 日本节点
      - 🇸🇬 狮城节点
      - 🇺🇲 美国节点
      - 🌐 全部节点
      - 所有-智能
      - 直连
# 出站策略 smart参数 （ uselightgbm: false, collectdata: false, strategy: sticky-sessions,policy-priority: "Premium:0.9;SG:1.3" ）
# 没有再使用锚点，是考虑很多新手修改难度，这样新手修改某个分组更容易些。
proxy-groups:
  - {name: 🚀 默认代理, <<: *default}
  - {name: ⚖️ 负载均衡, type: load-balance, strategy: consistent-hashing, url: "https://www.gstatic.com/generate_204", interval: 300, tolerance: 20, filter: "(?=.*(港|HK|澳|MO|台|TW|日|JP|韩|KR|新|SG|狮城|马|MY|泰|TH|越|VN))^((?!(美|欧|澳|非|远)).)*$", include-all: true}
  - {name: 📹 YouTube, <<: *default}
  - {name: ☁️ Cloudflare, <<: *default}
  - {name: 🍀 Google,<<: *default}
  - {name: 🕹️ STEAM, <<: *default}
  - {name: 💸 Crypto, <<: *default}

  - {name: 🤖 ChatGPT, <<: *default}
  - {name: 👨🏿‍💻 GitHub, <<: *default}
  - {name: 🐬 OneDrive, <<: *default}
  - {name: 💻 Microsoft, <<: *default}
  - {name: 🎵 TikTok, <<: *default}
  - {name: 📲 Telegram, <<: *default}
  - {name: 🎥 NETFLIX, <<: *default}
  - {name: ✈️ Speedtest,<<: *default}
  - {name: 💶 PayPal, <<: *default}
  - {name: 🍎 Apple, type: select, proxies: [直连, 🚀 默认代理]}
  - {name: 🎯 直连, type: select, proxies: [直连, 🚀 默认代理]}
  - {name: 🐟 漏网之鱼, type: select, proxies: [直连,🚀 默认代理]}
  - {name: 🇭🇰 香港节点, type: select, include-all: true, filter: "(?i)港|hk|hongkong|hong kong"}
  - {name: 🇯🇵 日本节点, type: select, include-all: true, filter: "(?i)日|jp|japan"}
  - {name: 🇸🇬 狮城节点, type: select, include-all: true, filter: "(?i)新加坡|坡|狮城|SG|Singapore"}
  - {name: 🇺🇲 美国节点, type: select, include-all: true, filter: "(?i)美|us|unitedstates|united states"}
  - {name: 🔯 香港故转, type: fallback, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(港|HK|(?i)Hong))^((?!(台|日|韩|新|深|美)).)*$"}
  - {name: 🔯 日本故转, type: fallback, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(日|JP|(?i)Japan))^((?!(港|台|韩|新|美)).)*$" }
  - {name: 🔯 狮城故转, type: fallback, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(新加坡|坡|狮城|SG|Singapore))^((?!(台|日|韩|深|美)).)*$"}
  - {name: 🔯 美国故转, type: fallback, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(美|US|(?i)States|America))^((?!(港|台|韩|新|日)).)*$" }
  - {name: ♻️ 香港智能, type: smart, uselightgbm: true, collectdata: true, include-all: true, interval: 300, filter: "(?=.*(港|HK|(?i)Hong))^((?!(台|日|韩|新|深|美)).)*$"}
  - {name: ♻️ 日本智能, type: smart, uselightgbm: true, collectdata: true, include-all: true, interval: 300, filter: "(?=.*(日|JP|(?i)Japan))^((?!(港|台|韩|新|美)).)*$" }
  - {name: ♻️ 狮城智能, type: smart, uselightgbm: false,collectdata: false,include-all: true, interval: 300, filter: "(?=.*(新加坡|坡|狮城|SG|Singapore))^((?!(港|台|韩|日|美)).)*$" }
  - {name: ♻️ 美国智能, type: smart, uselightgbm: true, collectdata: true, include-all: true, interval: 300, filter: "(?=.*(美|US|(?i)States|America))^((?!(港|台|日|韩|新)).)*$"}
  - {name: ♻️ 自动选择, type: url-test, url: "https://www.gstatic.com/generate_204", include-all: true, tolerance: 20, interval: 300, filter: "^((?!(直连)).)*$" }
  - {name: 所有-智能,   type: smart,include-all: true,policy-priority: "香港:1.2;牛逼:0.8",uselightgbm: true,collectdata: true,interval: 300 ,filter: "^((?!(直连|拒绝)).)*$"}
    
  - {name: 🌐 全部节点, type: select, include-all: true}

# 规则匹配
# 此规则部分没有做防泄露处理，因为弊严重大于利！
rules:
  - RULE-SET,private_proxy,🚀 默认代理
  - RULE-SET,private_direct,直连
  - RULE-SET,private_ip,直连
  - RULE-SET,private_domain,直连
  - RULE-SET,geolocation-cn,直连
  - RULE-SET,apple_domain,🍎 Apple
  - RULE-SET,ai,🤖 ChatGPT
  - RULE-SET,OKX_domain,💸 Crypto
  - RULE-SET,Bybit_domain,💸 Crypto
  - RULE-SET,Binance_domain,💸 Crypto
  - RULE-SET,steamcn_domain,🎯 直连
  - RULE-SET,steam_domain,🕹️ STEAM
  - RULE-SET,github_domain,👨🏿‍💻 GitHub
  - RULE-SET,youtube_domain,📹 YouTube
  - RULE-SET,google_domain,🍀 Google
  - RULE-SET,onedrive_domain,🐬 OneDrive
  - RULE-SET,microsoft_domain,💻 Microsoft
  - RULE-SET,tiktok_domain,🎵 TikTok
  - RULE-SET,speedtest_domain,✈️ Speedtest
  - RULE-SET,telegram_domain,📲 Telegram
  - RULE-SET,netflix_domain,🎥 NETFLIX
  - RULE-SET,paypal_domain,💶 PayPal
  - RULE-SET,gfw_domain,🚀 默认代理
  - RULE-SET,cloudflare_domain,🚀 默认代理  # 新增Cloudflare规则，走默认代理
  - RULE-SET,geolocation-!cn,🚀 默认代理
  - RULE-SET,google_ip,🍀 Google,no-resolve
  - RULE-SET,netflix_ip,🎥 NETFLIX,no-resolve
  - RULE-SET,telegram_ip,📲 Telegram,no-resolve
  - RULE-SET,cn_domain,🎯 直连
  - RULE-SET,cn_ip,🎯 直连
  - MATCH,🐟 漏网之鱼

# 规则集
## type：可选http/file/inline  behavior：可选domain/ipcidr/classical format：可选yaml/text/mrs https://wiki.metacubex.one/config/rule-providers/#behavior
rule-anchor:
  ip: &ip {type: http, interval: 86400, behavior: ipcidr, format: mrs}
  domain: &domain {type: http, interval: 86400, behavior: domain, format: mrs}
  class: &class {type: http, interval: 86400, behavior: classical, format: text}
  yaml: &yaml {type: http, interval: 86400, behavior: classical, format: yaml}
  yamlip: &yamlip {type: http, interval: 86400, behavior: ipcidr, format: yaml}
rule-providers: 
  private_proxy: { <<: *class, url: "https://raw.githubusercontent.com/jwwsjlm/clash_config/main/proxy.list"}
  private_direct: { <<: *class, url: "https://raw.githubusercontent.com/jwwsjlm/clash_config/main/direct.list"}
  private_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.mrs"}
  private_ip: {<<: *ip, url: "https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geoip/private.mrs"}
  ai: {  <<: *domain, url: "https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geosite/category-ai-!cn.mrs" }
  youtube_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.mrs"}
  google_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google.mrs"}
  github_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/github.mrs"}
  telegram_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/telegram.mrs"}
  netflix_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/netflix.mrs"}
  paypal_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/paypal.mrs"}
  onedrive_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/onedrive.mrs"}
  microsoft_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/microsoft.mrs"}
  apple_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/apple-cn.mrs"}
  speedtest_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/ookla-speedtest.mrs"}
  tiktok_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/tiktok.mrs"}
  gfw_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/gfw.mrs"}
  geolocation-!cn: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/geolocation-!cn.mrs"}
  geolocation-cn: { <<: *domain, url: "https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geosite/geolocation-cn@cn.mrs"}
  cn_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cn.mrs"}
  steam_domain: { <<: *domain, url: "https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geosite/steam.mrs"}
  steamcn_domain: { <<: *domain, url: "https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geosite/steam@cn.mrs"}
  cn_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.mrs"}
  google_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.mrs"}
  telegram_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/telegram.mrs"}
  netflix_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/netflix.mrs"}
  cloudflare_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cloudflare.mrs" }  # 新增Cloudflare域名规则集
  OKX_domain: { <<: *domain, url: "https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geosite/okx.mrs" }  # 新增OKX域名规则集
  Bybit_domain: {<<: *domain, url: "https://gh-proxy.com/github.com/metacubex/meta-rules-dat/raw/refs/heads/meta/geo/geosite/bybit.mrs"}
  Binance_domain: {<<: *domain, url: "https://gh-proxy.com/github.com/metacubex/meta-rules-dat/raw/refs/heads/meta/geo/geosite/binance.mrs"}
